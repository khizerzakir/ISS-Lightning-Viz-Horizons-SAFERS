// 默认的记录融合方法
const mergeMethods = {
  MERGE:(target, source) => {
    Object.assign(target, source);
  },
  CONS:(target, source) => {
    source.move(target);
  },
  CONS_SUCC:(target, source) => {
    target.succ = source.succ;
  },
  CONS_CURR_CATE: (target, source) => {
    source.succ.trav(rec => {
      rec.attr.level === 'CURR_CATE' && rec.move(target);
    })
  },
  CONS_DEST_CATE: (target, source) => {
    source.succ.trav(rec => {
      rec.attr.level === 'DEST_CATE' && rec.move(target);
    })
  },
  MOVE:(target, source) => {
    console.log('MOVE', source, 'TO', target);
    source.move(target, {byPushProto: true});
  },
  MOVE_SUCC:(target, {succ}) => {
    for (let i = 0; i < succ.length; i++) {
      succ[i].move(target, {byPushProto: true});
    }
  },
  MOVE_CURR_CATE: (target, source) => {
    source.succ.trav(rec => {
      rec.attr.level === 'CURR_CATE' && rec.move(target, {byPushProto: true});
    })
  },
  MOVE_DEST_CATE: (target, source) => {
    source.succ.trav(rec => {
      rec.attr.level === 'DEST_CATE' && rec.move(target, {byPushProto: true});
    })
  },
}

export default mergeMethods;