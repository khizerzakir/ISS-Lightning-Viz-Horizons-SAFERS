import {Entry} from '../Entry';
import {Accrual} from '../Accrual';

const accrual = (accrual, dir, {cr=0, dr=0}={}) => {
  if (accrual instanceof Accrual) {
    return accrual.copy();
  } else switch (dir) {
    case 'cr':
      return new Accrual({cr: accrual, dr: 0});
    case 'dr':
      return new Accrual({dr: accrual, cr: 0});
    default:
      return new Accrual({cr, dr});
  }
}

export class Balance extends Entry {
  constructor({opening, closing, direction, closingDir, openingDr, openingCr, closingDr, closingCr, ...entry}={}, opts) {
    super(entry, opts);

    this.opening = accrual(opening, direction, {cr: openingCr, dr:openingDr});
    this.closing = accrual(closing, direction, {cr: closingCr, dr:closingDr});

  }

  static from(list, {ListCons, orderKey, removeSucc}={}) {

    if (list.some(entry => !(entry instanceof Balance))) {
      throw Error('Balance.from: 新的余额项目必须由一个余额项目列表累加而成');
    }

    if (list.every(({curr:{code}}, i, a) => code !== a[0].curr.code)) {
      throw Error('Balance.from: 试图将不同的科目累加到一起');
    }

    const balance = new Balance(list[0], {emptyAccrual: true, ListCons});

    if (orderKey !== undefined) {
      list.orderBy?.(orderKey);
    }

    for (let entry of list) {
      balance.add(entry, {isAccum: true});
      entry.move(balance, {pushSide:'TAIL'});
    }

    if (removeSucc) {
      balance.succ = new ListCons();
    }

    return balance;
  }


  add(entry, {isAccum=false}={}) {

    if (!isAccum){
      this.opening.add(entry.opening);
    }
    
    this.accrual.add(entry.accrual);

    if(isAccum) {
      this.closing = entry.closing.copy();
    } else {
      this.closing.add(entry.closing);
    }
  }


  copy() {
    return new Balance(this);
  }
}