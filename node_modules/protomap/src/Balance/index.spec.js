import {Balance} from '.';
import {createEntryData, to2} from '../util';

describe('Balance', () => {

  describe('creating', () => {
    
    test('creating with direction', () => {
      const rawData = createEntryData({}, {dir:'dr',dirType:'direction'});
      const balance = new Balance(rawData);

      expect(balance.opening.dr).toBeCloseTo(rawData.opening);
      expect(balance.opening.cr).toBeCloseTo(0);
      expect(balance.closing.dr).toBeCloseTo(rawData.closing);
      expect(balance.closing.cr).toBeCloseTo(0);

      const {opening, accrual, closing} = balance;
      // expect(closing.dr).toBeCloseTo(to2(to2(opening.dr) + to2(accrual.dr) - to2(accrual.cr)));
      expect(closing.cr).toBeCloseTo(0);
    })

    test('creating with value', () => {
      const rawData = createEntryData({}, {dir:'dr',dirType:'two-column'});
      const balance = new Balance(rawData);

      expect(balance.opening.dr).toBeCloseTo(to2(rawData.openingDr));
      expect(balance.opening.cr).toBeCloseTo(to2(rawData.openingCr));
      expect(balance.closing.dr).toBeCloseTo(to2(rawData.closingDr));
      expect(balance.closing.cr).toBeCloseTo(to2(rawData.closingCr));

      const {opening, accrual, closing} = balance;
      expect(closing.dr).toBeCloseTo(to2(opening.dr) + to2(accrual.dr));
      expect(closing.cr).toBeCloseTo(to2(opening.cr) + to2(accrual.cr));
    })

  })

})

describe('adding other', () => {

  const raw = createEntryData();
  const entry = new Balance(raw);

  test('normal adding', () => {
    const entry1 = entry.copy();
    const entry2 = new Balance(createEntryData());

    entry1.add(entry2);

    expect(entry1.accrual.cr).toBeCloseTo(to2(entry.accrual.cr + entry2.accrual.cr))
    expect(entry1.accrual.dr).toBeCloseTo(to2(entry.accrual.dr + entry2.accrual.dr))
  })

  test('accumulating', () => {
    const entry1 = entry.copy();
    const {curr} = entry1;
    const entry2 = new Balance(createEntryData({curr}));

    entry1.add(entry2, {isAccum:true});

    expect(entry1.accrual.cr).toBeCloseTo(to2(entry.accrual.cr + entry2.accrual.cr))
    expect(entry1.accrual.dr).toBeCloseTo(to2(entry.accrual.dr + entry2.accrual.dr))
    expect(entry1.opening.cr).toBeCloseTo(to2(entry.opening.cr))
    expect(entry1.opening.dr).toBeCloseTo(to2(entry.opening.dr))
    expect(entry1.closing.cr).toBeCloseTo(to2(entry2.closing.cr))
    expect(entry1.closing.dr).toBeCloseTo(to2(entry2.closing.dr))

  })

})
