const {Accrual} = require('.');
const {createEntryData} = require('../util');

function to2 (number) {
  if (typeof number === 'number') {
    return parseFloat(number.toFixed(2))
  } else {
    return number;
  }
}

describe('add', ()=>{
  test('adding', () => {
    const acc = new Accrual(createEntryData());
    const acc1 = acc.copy();
    const acc2 = new Accrual(createEntryData());

    acc1.add(acc2);

    expect(acc1.cr).toBe(to2(acc.cr + acc2.cr))
    expect(acc1.dr).toBe(to2(acc.dr + acc2.dr))
  })
})

describe('diff', () => {
  const entry = new Accrual(createEntryData());

  test('positive', () => {
    const {cr, dr} = entry;
    const res = entry.diff();
    expect(res).toBe(to2(dr - cr));
  })

  test('negative', () => {
    const {dr, cr} = entry;
    const res = entry.diff(-1)
    expect(res).toBe(to2(cr - dr));
  })
})


describe('check', () => {
  const raw = createEntryData();

  test('cr', () => {
    const entry = new Accrual({...raw, dr:0});
    expect(entry.dir()).toBe('cr');
  })

  test('dr', () => {
    const entry = new Accrual({...raw, cr:0});
    expect(entry.dir()).toBe('dr');
  })

  test('zero', () => {
    const entry = new Accrual({...raw, cr:0, dr:0});
    expect(entry.dir()).toBe('zero');
  })
})

describe('swap', () => {

  test('swap', () => {
    const {cr, dr} = createEntryData();
    const entry = new Accrual({cr:-dr, dr:-cr});
    console.log(entry);
    entry.swap();
    expect(entry.cr).toBe(to2(cr));
    expect(entry.dr).toBe(to2(dr));
    expect(entry.swapped).toBe(true);

    entry.unswap();
    expect(entry.cr).toBe(to2(-dr));
    expect(entry.dr).toBe(to2(-cr));
    expect(entry.swapped).toBe(false);
  })
})
