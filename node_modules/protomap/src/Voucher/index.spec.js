const {Voucher} = require('.');
const {Entry} = require('../Entry');

const {createCascade, formVoucher} = require('../util');


describe('create & decompose', () => {
  let cates = createCascade().nest().flat(); 

  let voucher;

  test('create', () => {

    let voucherEntries = formVoucher(cates);
    voucher = Voucher.from(voucherEntries);

    expect(voucher.accrual.cr).toBeCloseTo(voucher.accrual.dr);
    expect(voucher instanceof Voucher).toBe(true);
    expect(voucher instanceof Entry).toBe(true);
  });

  test('decompose', () => {
    voucher.decomposeNorm();
    const pairs = voucher.succ.partition(2);
    expect(pairs.last().length).toBe(2);
    expect(pairs.every(([{accrual:{dr}}, {accrual:{cr}}]) => dr === cr && dr > 0 && cr > 0)).toBe(true);
  })

  test('create empty identity', () => {

    let voucherEntries = formVoucher(cates);
    voucher = Voucher.from(voucherEntries, {emptyIdentity: true});
  
    expect(voucher.curr.code).toBe('NONE');
    expect(voucher.curr.name).toBe('NONE');
  })

})