const {Entry} = require('.');
const {createCascade, createEntry, createEntryData} = require('../util');

describe('creating entry', () => {
  
  test('instanceof', () => {
    const raw = createEntryData();
    const entry = new Entry(raw);
    expect(entry instanceof Entry).toBe(true);
  })

  test('with item', () => {
    const data = createEntryData({}, {item:true});
    const entry = new Entry(data);
    expect(entry.curr.code).toBe(`${data.code}.${data.itemCode}`);
    expect(entry.curr.name).toBe(data.itemName);
  })

  test('without item', () => {
    const data = createEntryData();
    const entry2 = new Entry(data);
    expect(entry2.curr.code).toBe(data.code);
    expect(entry2.curr.name).toBe(data.name);
  })

})

describe('copying', () => {
  const entry = new Entry(createEntryData());
  
  test('copying wihtout clearing', () => {
    const copy = entry.copy();
    expect(entry.curr).toBe(copy.curr);
    expect(entry.dest).toBe(copy.dest);
    expect(entry).not.toBe(copy);
  })

  test('copying wiht clearing', () => {
    const copy = entry.copy({emptyAccrual: true});
    expect(entry.curr).toBe(copy.curr);
    expect(entry.dest).toBe(copy.dest);
    expect(copy.accrual.cr).toBe(0)
    expect(copy.accrual.dr).toBe(0)
    expect(entry).not.toBe(copy);
  })
})

// test('move', () => {
//   const entry1 = new Entry(createEntryData());
//   const entry2 = new Entry(createEntryData());
//   entry1.move(entry2);
//   expect(entry1.pred.succ).toContain(entry1);
// })

// describe('funky prototype operation', () => {

//   const entry = new Entry(createEntryData());
//   const proto = entry.pushProto();
//   const proproto = proto.pushProto();
  
//   test('pushProto', () => {

//     expect(proto).not.toBe(entry);
//     expect(proto.__proto__).toBe(entry);
//     expect(proto.constructor).toBe(entry.constructor);
//     expect(proto.code).toBe(entry.code);
//     expect(proto.hasOwnProperty('code')).toBe(false);
//     expect(proto.__proto__.hasOwnProperty('constructor')).toBe(false);
//     expect(proto.__proto__.__proto__.hasOwnProperty('constructor')).toBe(true);
    
//     expect(JSON.parse(JSON.stringify(proto)).code).toBe(undefined);
  
//     const {curr} = proto;
//     proto.curr = new Ident({code: '1234'});
//     expect(proto.curr).not.toBe(entry.curr);
//     expect(entry.curr).toBe(curr);
    
//     proproto.curr = new Ident({code: '5678'});
//     expect(proto.curr.code).toBe('1234');
//   })

//   test('flatProto', () => {
//     const flat = proproto.flatProto();
//     expect(flat.curr.code).toBe('5678');
//   })
// })