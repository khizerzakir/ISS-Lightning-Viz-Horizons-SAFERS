const { Entry } = require('../Entry');
const {createCascade, randomSelect} = require('../util');

function path(entry) {
  const paths = [];
  for (let curr = entry; curr; curr = curr.pred) {
    paths.push(curr);
  }
  return paths.reverse();
}

describe('category', () => {
  const orig = createCascade({attempts:100});
  
  test('flat unnested throws error', () => {
    expect(() => orig.flat()).toThrow();
  })

  test('nest nested throws error', () => {
    const nest = createCascade({attempts:100});
    expect(() => nest.nest().nest()).toThrow();
  })

  test('invalid code throws error', () => {
    const proneError = orig.slice().map(e => new Entry({...e, curr:{...e.curr, code: 1234}}));
    expect(() => proneError.nest()).toThrow();
  })

  test('createCascade', () => {

    const curr = orig.nest().flat();
    expect(orig.length).toEqual(curr.length);

    const origCode = orig.map(({curr: {code}}) => code).sort();
    const currCode = curr.map(({curr: {code}}) => code).sort();
    
    expect(origCode).toEqual(currCode);

    const entry = randomSelect(curr);
    expect(entry.path).toBe(path(entry).map(({curr:{name}}) => name).join('/'));
  })
})